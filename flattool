#!/usr/bin/env bash
# SPDX-License-Identifier: GPL-3.0-only

# Global variables
versionNumber="0.1.2"
appID=''

# Functions to save time programming this
# ====================================================================================
# Making a println function because I cannot be asked to remember to add \n every time
println() {
    printf -- "$*\n"
}

# Function to make printing error message easier
printerr() {
    printf "\033[1;31merror:\033[0m $1\n\n"

    if [ $# -eq 2 ]; then
        printf "${2}\n"
    fi
}

# Get explicit concent function
userConcent() {
    prompt=$1
    printf -- "$prompt [y|N]: "
    read -r answer
    case "$answer" in
        [Yy])
            println "Continuing..."
            return 0
            ;;
        *)
            println "Aborted"
            exit 1
            ;;
    esac
}

# Information printing function
printinfo() {
    printf -- "  Version\t${versionNumber}\n"
    printf -- "  Location\t${0}\n\n"
}

# Function to easily check that the command called has the right amount of arguments
checkArgLength() {
    minLnegth=$1
    maxLength=$2
    if [ $minLnegth -lt 0 ] || ( [ $minLnegth -gt $maxLength ] && [ $maxLength -ge 0 ] ); then
        printerr "Internal program error: checkArgLength called with improper min or max values\n$0"
        exit 1
    fi
    shift
    shift
    shift
    if [ $# -lt $minLnegth ]; then
        print_subcommand_help $subcommand
        exit 1
    fi

    if [ $maxLength -ge 0 ] && [ $# -gt $maxLength ]; then
        print_subcommand_help
        exit 1
    fi
}
# ====================================================================================

printMasterHelp() {
    println "Usage: flattool <command>"
    printinfo
    println "Commands:"

    print_subcommand_help "install"
    print_subcommand_help "uninstall"
    print_subcommand_help "purge"
    print_subcommand_help "search"
    print_subcommand_help "id"
    print_subcommand_help "run"
    print_subcommand_help "orphans"
    print_subcommand_help "version"
    print_subcommand_help "help"
}

print_subcommand_help() {
    case $1 in
        install)
            println "  install - usage: flattool install <app-query> <app-query> <app-query> ..."
            println "    can also be ran with '-i'"
            println "    about: Installs one or more flatpak apps with separate processes to avoid cancelling the queue if a name cannot be matched\n"
            ;;
        uninstall)
            println "  uninstall - usage: flattool uninstall <app-query> <app-query> <app-query> ..."
            println "    can also be ran with '-u', 'remove', 'rm'"
            println "    about: Uninstalls one or more flatpak apps with separate processes to avoid cancelling the queue if a name cannot be matched\n"
            ;;
        purge)
            println "  purge - usage: flattool purge <app-query>"
            println "    can also be ran with '-p'"
            println "    about: Uninstalls a flatpak app and trashes its user data folder\n"
            ;;
        search)
            println "  search - usage: flattool search <app-query>"
            println "    can also be ran with '-s'"
            println "    about: Searches installed flatpaks and returns lines from 'flatpak list' that match the query\n"
            ;;
        id)
            println "  id - usage: flattool id <app-query>"
            println "    about: Returns the first matching Application ID for the query\n"
            ;;
        run)
            println "  run - usage: flattool run <app-query>"
            println "    can also be ran with '-r'"
            println "    about: Runs the first matching application for the query, not requiring the full Application ID\n"
            ;;
        orphans)
            println "  orphans - usage: flattool orphans"
            println "    can also be ran with '-o'"
            println "    about: Looks through ~/.var/app (the user data folder) and finds all folders that do not have corrosponding installed flatpaks, then prompts asks user what to do with them\n"
            ;;
        version)
            println "  version - usage: flattool version"
            println "    can also be ran with '-v', '--version'"
            println "    about: prints the currently running version of flattool and where flattool is running from\n"
            ;;
        help)
            println "  help - usage: flattool help"
            println "    can also be ran with '-h', '--help'"
            println "    about: prints the full help message for flattool"
            ;;
    esac
}

# <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
# <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
# <><><><><><><><><><><=[ B E G I N   M A I N   P R O G R A M ]=<><><><><><><><><><><>
# <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
# <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>

# Setting the subcommand
subcommand=$1

# Expand flags and aliases
case $subcommand in
    -h)
        subcommand="help"
        ;;
    -i)
        subcommand="install"
        ;;
    -u | rm | remove)
        subcommand="uninstall"
        ;;
    -r)
        subcommand="run"
        ;;
    -p)
        subcommand="purge"
        ;;
    -o)
        subcommand="orphans"
        ;;
    -s)
        subcommand="search"
        ;;
    -v | --version)
        subcommand="version"
        ;;
esac

# Main functions for the app
# ====================================================================================
identifyByQuery() {
    app=$(flatpak list | awk -v app="${1,,}" -F '\t' 'tolower($0) ~ app { print $2 }' | head -n 1)
    if [ -z $app ]; then
        printerr "No Application ID found from query: '\033[1m${1}\033[0m'"

        exit 1
    fi
    appID=$app
}

searchApp() {
    output=$(flatpak list | grep -i "$1")
    if [ -z "$output" ]; then
        println "No installed application found from query: '\033[1m$1\033[0m'"
        exit 1
    fi
    println "$output"
}

installApp() {
    # Do multiple flatpak installs for multiple apps
    while [ $# -gt 0 ]; do
        flatpak install $1
        println
        shift
    done
}

removeApp() {
    # Do multiple flatpak removes for multiple apps
    while [ $# -gt 0 ]; do
        flatpak remove $1
        println
        shift
    done
}

purgeApp() {
    identifyByQuery $1
    userConcent "Are you sure you want to uninstall \033[1m${appID}\033[0m and move its user data to the trash?"
    flatpak uninstall $appID
    gio trash $HOME/.var/app/$appID
}

fixOprphans() {
    println "Checking '~/.var/app' for orphaned folders..."
    orphanedAppsList=''
    while read -r i; do
        currentApp=$(flatpak list | grep -F "$i")
        if [ $? -ne 0 ]; then
            orphanedAppsList="${orphanedAppsList} $i"
        fi
    done < <(ls ~/.var/app)

    if [ -n "$orphanedAppsList" ]; then
        orphanedAppsList=($orphanedAppsList)
        println "These user data folders exist with no installed flatpaks:"
        for element in "${orphanedAppsList[@]}"; do
            printf '%s\n' "$element"
        done

        println "What would you like to do with these folders?"
        println "  1) Attempt to install matching flatpaks"
        println "  2) Move these folders to the trash"

        totalOfOrphans=${#orphanedAppsList[@]}
        maxChoices=2
        if [ $totalOfOrphans -gt 1 ]; then
            println "  3) Decide for each folder individually"
            maxChoices=3
        fi

        printf "\nWhich option do you want to use (0 to abort)? [0-$maxChoices]: "
        while true; do
            read -r answer
            if ! [ "$answer" -eq "$answer" ] 2>/dev/null || [ "$answer" -lt 0 ] || [ "$answer" -gt "$maxChoices" ]; then
                printf "Which option do you want to use (0 to abort)? [0-$maxChoices]: "
            else
                break
            fi
        done

        case "$answer" in
            1)
                println "Attempting to install"
                installApp "${orphanedAppsList[@]}"
                ;;
            2)
                println "Trashing"
                for element in "${orphanedAppsList[@]}"; do
                    gio trash "$HOME/.var/app/$element"
                done
                ;;
            3)
                for element in "${orphanedAppsList[@]}"; do
                    println "For folder '$element', choose an option"
                    printf "[T]rash, [I]install, or [S]kip: "
                    while true; do
                        read -r answer
                        case "$answer" in
                            [tT])
                                println "Trashing"
                                gio trash "$HOME/.var/app/$element"
                                break
                                ;;
                            [iI])
                                println "Attempting to install"
                                installApp "$element"
                                break
                                ;;
                            [sS])
                                println "Skipping"
                                break
                                ;;
                            *)
                                printf "[T]rash, [I]install, or [S]kip: "
                                ;;
                        esac
                    done
                done
                ;;
            *)
                println "Aborted"
                ;;
        esac
    else
        println "There are no orphaned user data folders"
    fi
}
# ====================================================================================

# Check if any subcommand is provided
if [ $# -eq 0 ]; then
    printerr "No command specified" "See 'flattool --help'"
    exit 1
fi

# Calling the correct subcommand help responses
if [ "$#" -gt 0 ] && [ "${@:$#}" = "-h" -o "${@:$#}" = "--help" ]; then
    if [ "$#" -eq 1 ]; then
        printMasterHelp
        exit 0
    fi
    print_subcommand_help $subcommand
    exit 0
fi

# Switch case to run the proper function per subcommand
case "$subcommand" in
    id)
        checkArgLength 1 1 $*
        identifyByQuery $2
        println $appID
        ;;
    run)
        checkArgLength 1 1 $*
        identifyByQuery $2
        flatpak run $appID
        ;;
    install)
        checkArgLength 1 -1 $*
        shift
        installApp "$@"
        ;;
    uninstall)
        checkArgLength 1 -1 $*
        shift
        removeApp "$@"
        ;;
    purge)
        purgeApp $2
        ;;
    search)
        searchApp $2
        ;;
    orphans)
        fixOprphans
        ;;
    help)
        printMasterHelp
        ;;
    version)
        printinfo
        ;;
    *)
        printerr "'${subcommand}' is not a flattool command" "See 'flattool --help'"
        ;;
esac
